#?delimiters <%,%>,<%=,%>
<%
import org.apache.commons.lang.StringUtils
import java.util.*
setXMLOutput()

def mode = unit["mode"];
if ("filler" == mode) {
%><Descriptor service="com.webratio.units.store.rtffillerunit.RTFFillerUnitServiceAsFillerMode"><%  

	/*
	 * Filler mode
	 */
	def placeHolderKeys = new ArrayList();
	def placeHolderDefaultValues = new HashMap();
	
	/*
	 * retrieve place holder names parsing RTF template
	 */
	def rtfTemplateValue = unit["rtfTemplate"];
	if (!StringUtils.isBlank(rtfTemplateValue)) {
		/*
		 * retrieve rtf text parsing file
		 */
		def rtfText = ""
		def rtfFile = new File(wr.projectDir + "/WebContent", rtfTemplateValue)
		if (rtfFile.isFile()) {
			try {
				rtfText = rtfFile.getText()
			} catch (Throwable e) {
		        // ignore any exception
		    }
		}
	
			
        /*
         * compute place holder keys
         */
		def stringToSplit = "_" + StringUtils.replace(rtfText, "\$\$\$\$", "\$\$_\$\$")
		def holders = StringUtils.splitByWholeSeparator(stringToSplit, "\$\$")
		def visitedHolders = new HashSet();
		for (i in 0..holders.size() - 1) {
			if (i % 2 != 0) {
				def h = holders[i];
				if (visitedHolders.contains(h)) {
					continue;
				}
				visitedHolders.add(h);
				def placeHolderKey = h; // with empty default value
		        if (!StringUtils.isBlank(placeHolderKey)) {
		            /*
		             * compute place holder label
		             */
		            placeHolderKey = StringUtils.remove(placeHolderKey, '{');
		            placeHolderKey = StringUtils.remove(placeHolderKey, '}');
		            List parts = new ArrayList();
		            String[] ss = StringUtils.split(placeHolderKey);
		            for (int j = 0; j < ss.length; j++) {
		                String part = ss[j];
		                if (StringUtils.isBlank(part)) {
		                    // skip empty parts
		                    continue;
		                }
		                if (part.startsWith("\\")) {
		                    // skip rtf code parts
		                    continue;
		                }
		                /*
		                 * replace \'hh codes e.g. StringUtils.replace(part, "\\'e0", "à");
		                 * 
		                 * \'hh A hexadecimal value, based on the specified character set (may be used to identify 8-bit values).
		                 */
	                    String newPart = "";
	                    char[] partChars = part.toCharArray();
	                    int partCharsLength = partChars.length;
	                    for (int j2 = 0; j2 < partCharsLength;) {
	                        char pc = partChars[j2++];
	                        if ((pc == '\\') && (j2 < (partCharsLength + 2)) && (partChars[j2] == '\'')) {
	                            // case of \'hh
	                            j2++;
	                            char c0 = partChars[j2++];
	                            char c1 = partChars[j2++];
	                            try {
	                                int charCode = Integer.parseInt(("" + c0 + c1).toUpperCase(), 16);
	                                newPart += ("" + ((char) charCode));
	                            } catch (NumberFormatException e) {
	                            }
	                        } else {
	                            newPart += pc;
	                        }
	                    }
	                    part = newPart;
		                /*
		                 * add removing end codes
		                 */
		                parts.add(StringUtils.substringBefore(part, "\\"));
		            }
		            placeHolderKey = StringUtils.join(parts, "");
		            if (!placeHolderKeys.contains(placeHolderKey)) {
		            	placeHolderKeys.add(placeHolderKey);
		            }
		        }
			}
		}


	}


	/*
	 * retrieve place holder names (and default values) from sub units
	 */
	for(p in unit.selectNodes("PlaceHolder")) { 
		// append new place holder name
		def placeHolderKey = p["name"];
		if (!placeHolderKeys.contains(placeHolderKey)) {
			placeHolderKeys.add(placeHolderKey);
		}
		// register default value
		def placeHolderDefaultValue = p.valueOf("Value");
		if (!StringUtils.isEmpty(placeHolderDefaultValue)) {
			placeHolderDefaultValues.put(placeHolderKey, placeHolderDefaultValue);
		}
	}
	
	/*
	 * create place holder nodes
	 */ 
	for(placeHolderKey in placeHolderKeys) { %>
		<PlaceHolder name="<%=placeHolderKey%>"><%=StringUtils.defaultString(placeHolderDefaultValues.get(placeHolderKey))%></PlaceHolder><%
	}



} else if ("parser" == mode) {
%><Descriptor service="com.webratio.units.store.rtffillerunit.RTFFillerUnitServiceAsParserMode"><%
	/*
	 * Parser mode
	 */
	// no other infor are required
}


%>
	<Mode><%=mode%></Mode>
	<RTFTemplate><%=unit["rtfTemplate"]%></RTFTemplate>
</Descriptor>
